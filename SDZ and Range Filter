//@version=5
// Developed by Mihir Madkaikar
indicator("Supply and Demand Zones / Range Filter",shorttitle="SDZ and Range Filter", overlay=true, max_boxes_count=500)

// Inputs
candleDifferenceScale = input.float(1.8, minval=1, title="Zone Difference Scale")
zoneOffset = input.int(15, minval=0, title="Zone Extension")
supplyEnable = input.bool(true, title="Enable Supply Zones")
supplyColor = input.color(color.rgb(242, 54, 69, 94), title="Supply Zone Color")
supplyBorderColor = input.color(color.rgb(209, 212, 220, 90), title="Supply Zone Border Color")
demandEnable = input.bool(true, title="Enable Demand Zones")
demandColor = input.color(color.rgb(76, 175, 80, 94), title="Demand Zone Color")
demandBorderColor = input.color(color.rgb(209, 212, 220, 80), title="Demand Zone Border Color")
textEnable = input.bool(true, title="Display Text in Zones")
textSize = input.string("Small", title="Text Size", options=["Tiny", "Small", "Normal", "Large"])
textColor = input.color(color.white, title="Text Color")

// Variables
var box[] supplyBoxes = array.new_box()
var box[] demandBoxes = array.new_box()

// Helper function to create zones
createZone(zoneType, top, bottom) =>
    // Create the zone box
    box zone = box.new(left=bar_index, right=bar_index + zoneOffset,  top=top, bottom=bottom, bgcolor=(zoneType == "supply" ? supplyColor : demandColor), border_color=(zoneType == "supply" ? supplyBorderColor : demandBorderColor))
    // Add text label if enabled
    if textEnable
        label.new(x=bar_index + zoneOffset, y=bottom, text=zoneType, color=color.new(textColor, 0), textalign=text.align_right, size=(textSize == "Tiny" ? size.tiny : textSize == "Small" ? size.small : textSize == "Normal" ? size.normal : size.large))
    // Add the box to the corresponding array
    array.push(zoneType == "supply" ? supplyBoxes : demandBoxes, zone)

// Detect supply and demand zones
redCandle = close < open
greenCandle = close > open
candleChange = math.abs(close - open)

if supplyEnable and redCandle and greenCandle[1] and candleChange / candleChange[1] >= candleDifferenceScale
    createZone("supply", high, open[1])

if demandEnable and greenCandle and redCandle[1] and candleChange / candleChange[1] >= candleDifferenceScale
    createZone("demand", open[1], low)

// Extend existing zones horizontally
updateZones(zoneType, zoneArray) =>
    if array.size(zoneArray) > 0
        for i = 0 to array.size(zoneArray) - 1
            box zone = array.get(zoneArray, i)
            box.set_right(zone, bar_index + zoneOffset)

// Remove broken zones
removeBrokenZones(zoneType, zoneArray) =>
    i = array.size(zoneArray) - 1
    while i >= 0
        box zone = array.get(zoneArray, i)
        float breakLevel = zoneType == "supply" ? box.get_top(zone) : box.get_bottom(zone)
        if (zoneType == "supply" and high > breakLevel) or (zoneType == "demand" and low < breakLevel)
            array.remove(zoneArray, i)
            box.delete(zone)
        i -= 1

// Update zones
updateZones("supply", supplyBoxes)
updateZones("demand", demandBoxes)
removeBrokenZones("supply", supplyBoxes)
removeBrokenZones("demand", demandBoxes)





// Color variables
upColor   = color.green
midColor  = #90bff9
downColor = color.red

// Source
src = input(defval=close, title="Source")

// Sampling Period
// Settings for 5min chart, BTCUSDC. For Other coin, change the paremeters
per = input.int(defval=100, minval=1, title="Sampling Period")

// Range Multiplier
mult = input.float(defval=2.0, minval=0.1, title="Range Multiplier")

// Smooth Average Range
smoothrng(x, t, m) =>
    wper = t * 2 - 1
    avrng = ta.ema(math.abs(x - x[1]), t)
    smoothrng = ta.ema(avrng, wper) * m
    smoothrng
smrng = smoothrng(src, per, mult)

// Range Filter
rngfilt(x, r) =>
    rngfilt = x
    rngfilt := x > nz(rngfilt[1]) ? x - r < nz(rngfilt[1]) ? nz(rngfilt[1]) : x - r : 
       x + r > nz(rngfilt[1]) ? nz(rngfilt[1]) : x + r
    rngfilt
filt = rngfilt(src, smrng)

// Filter Direction
upward = 0.0
upward := filt > filt[1] ? nz(upward[1]) + 1 : filt < filt[1] ? 0 : nz(upward[1])
downward = 0.0
downward := filt < filt[1] ? nz(downward[1]) + 1 : filt > filt[1] ? 0 : nz(downward[1])

// Target Bands
hband = filt + smrng
lband = filt - smrng

// Colors
filtcolor = upward > 0 ? upColor : downward > 0 ? downColor : midColor
barcolor = src > filt and src > src[1] and upward > 0 ? upColor :
   src > filt and src < src[1] and upward > 0 ? upColor : 
   src < filt and src < src[1] and downward > 0 ? downColor : 
   src < filt and src > src[1] and downward > 0 ? downColor : midColor

filtplot = plot(filt, color=filtcolor, linewidth=2, title="Range Filter")

// Target
hbandplot = plot(hband, color=color.new(upColor, 70), title="High Target")
lbandplot = plot(lband, color=color.new(downColor, 70), title="Low Target")

// Fills
fill(hbandplot, filtplot, color=color.new(upColor, 90), title="High Target Range")
fill(lbandplot, filtplot, color=color.new(downColor, 90), title="Low Target Range")

// Bar Color
barcolor(barcolor)

// Break Outs
longCond = bool(na)
shortCond = bool(na)
longCond := src > filt and src > src[1] and upward > 0 or 
   src > filt and src < src[1] and upward > 0
shortCond := src < filt and src < src[1] and downward > 0 or 
   src < filt and src > src[1] and downward > 0

CondIni = 0
CondIni := longCond ? 1 : shortCond ? -1 : CondIni[1]
longCondition = longCond and CondIni[1] == -1
shortCondition = shortCond and CondIni[1] == 1

//Alerts
plotshape(longCondition, title="Buy Signal", text="Buy", textcolor=color.white, style=shape.labelup, size=size.small, location=location.belowbar, color=color.new(upColor, 20))
plotshape(shortCondition, title="Sell Signal", text="Sell", textcolor=color.white, style=shape.labeldown, size=size.small, location=location.abovebar, color=color.new(downColor, 20))


alertcondition(longCondition, title="Buy alert on Range Filter", message="Buy alert on Range Filter")
alertcondition(shortCondition, title="Sell alert on Range Filter", message="Sell alert on Range Filter")
alertcondition(longCondition or shortCondition, title="Buy and Sell alert on Range Filter", message="Buy and Sell alert on Range Filter")
